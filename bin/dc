#!/usr/bin/env node
const program = require('commander')
const inquirer = require('inquirer')
const downloadRepo = require('../lib/downloadRepo')
const install = require('../lib/install')
const outputDoc = require('../lib/outputDoc')
const { errInfo } = require('../lib/config')
const { version } = require('../package.json')
const Exception = require('../lib/exception')
const getRepoAddr = require('../lib/getRepoAddr')

program
  .version(version, '-v, --version')
  .command('create <dir>')
  .action(async dir => {
    let isCreated = false
    const answers = await inquirer.prompt([
      {
        type: 'list',
        message: '选择你的项目类型',
        name: 'repoType',
        choices: [
          {
            name: '基础框架',
            value: 'base',
            short: '基础框架'
          },
          {
            name: '业务模板',
            value: 'business',
            short: '业务模板'
          }
        ]
      },
      {
        type: 'list',
        message: '选择终端',
        name: 'terminal',
        choices: [
          {
            name: 'pc端',
            value: 'pc',
            short: 'pc端'
          },
          {
            name: '移动端',
            value: 'h5',
            short: '移动端'
          }
        ]
      },
      {
        type: 'list',
        message: '选择ui模板',
        name: 'name',
        when (answers) {
          return answers.repoType === 'base' && answers.terminal === 'pc'
        },
        choices: [
          {
            name: 'Ant Design for Vue',
            value: 'antd',
            short: 'Ant Design for Vue'
          },
          {
            name: 'ElementUI',
            value: 'ele',
            short: 'ElementUI'
          }
        ]
      },
      {
        type: 'list',
        message: '选择后台模板',
        name: 'name',
        when (answers) {
          return answers.repoType === 'business' && answers.terminal === 'pc'
        },
        choices: [
          {
            name: '公司官网后台模板',
            value: 'offical',
            short: '公司官网后台模板'
          },
          {
            name: '游戏官网后台模板',
            value: 'game',
            short: '游戏官网后台模板'
          },
          {
            name: '运营后台模板',
            value: 'operation',
            short: '运营后台模板'
          },
          {
            name: '发行数据后台模板',
            value: 'plan',
            short: '发行数据后台模板'
          }
        ]
      },
      {
        type: 'list',
        message: '选择后台模板',
        name: 'name',
        when (answers) {
          return answers.repoType === 'business' && answers.terminal === 'h5'
        },
        choices: [
          {
            name: '发行平台后端模板',
            value: 'plan',
            short: '发行平台后端模板'
          }
        ]
      },
      {
        type: 'confirm',
        name: 'installed',
        message: '是否需要自动安装依赖',
        default: true
      }
    ])

    // ============================================
    const repoAddr = getRepoAddr(answers)
    console.log(getRepoAddr(answers))

    try {
      if (repoAddr === '') {
        throw new Exception({
          msg: errInfo.NOEXIST
        })
      }
      await downloadRepo(repoAddr, dir)
      isCreated = true
    } catch (e) {
      console.error(e.msg)
      console.error(e.info)
    }

    // 安装依赖
    try {
      answers.installed && isCreated && await install(dir)
    } catch (e) {
      console.error(e.msg)
      console.error(e.info)
      outputDoc(false, dir)
      return
    }

    // 输出相关命令
    outputDoc(answers.installed, dir)
  })

// TODO: 可以生成单独创建jsx的组件
// program
//   .command('jsx <dir>')
//   .action(async dir => {
//     console.log(dir)
//   })

// parse param from process.argv
program.parse(process.argv)
